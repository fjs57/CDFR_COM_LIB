/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_PROTOS_ENCODER_PB_H_INCLUDED
#define PB_PROTOS_ENCODER_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _EncoderErrorCode {
    EncoderErrorCode_NO_ERROR = 0,
    EncoderErrorCode_GENERIC_ERROR = 1
} EncoderErrorCode;

typedef enum _EncoderEvent {
    EncoderEvent_NO_EVENT = 0,
    EncoderEvent_HIGH_LIMIT = 1,
    EncoderEvent_LOW_LIMIT = 2,
    EncoderEvent_ZERO_CROSS = 3
} EncoderEvent;

/* Struct definitions */
typedef struct _EncoderState {
    double continuous_position;
    double position;
    EncoderEvent event;
    EncoderErrorCode error_code;
} EncoderState;

typedef struct _EncoderConfig {
    double offset;
    bool send_periodically;
    uint32_t send_period;
    bool send_on_high_limit;
    double high_limit;
    bool send_on_low_limit;
    double low_limit;
    bool send_on_zero_cross;
} EncoderConfig;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _EncoderErrorCode_MIN EncoderErrorCode_NO_ERROR
#define _EncoderErrorCode_MAX EncoderErrorCode_GENERIC_ERROR
#define _EncoderErrorCode_ARRAYSIZE ((EncoderErrorCode)(EncoderErrorCode_GENERIC_ERROR+1))

#define _EncoderEvent_MIN EncoderEvent_NO_EVENT
#define _EncoderEvent_MAX EncoderEvent_ZERO_CROSS
#define _EncoderEvent_ARRAYSIZE ((EncoderEvent)(EncoderEvent_ZERO_CROSS+1))

#define EncoderState_event_ENUMTYPE EncoderEvent
#define EncoderState_error_code_ENUMTYPE EncoderErrorCode



/* Initializer values for message structs */
#define EncoderState_init_default                {0, 0, _EncoderEvent_MIN, _EncoderErrorCode_MIN}
#define EncoderConfig_init_default               {0, 0, 0, 0, 0, 0, 0, 0}
#define EncoderState_init_zero                   {0, 0, _EncoderEvent_MIN, _EncoderErrorCode_MIN}
#define EncoderConfig_init_zero                  {0, 0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define EncoderState_continuous_position_tag     1
#define EncoderState_position_tag                2
#define EncoderState_event_tag                   3
#define EncoderState_error_code_tag              4
#define EncoderConfig_offset_tag                 1
#define EncoderConfig_send_periodically_tag      2
#define EncoderConfig_send_period_tag            3
#define EncoderConfig_send_on_high_limit_tag     4
#define EncoderConfig_high_limit_tag             5
#define EncoderConfig_send_on_low_limit_tag      6
#define EncoderConfig_low_limit_tag              7
#define EncoderConfig_send_on_zero_cross_tag     8

/* Struct field encoding specification for nanopb */
#define EncoderState_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, DOUBLE,   continuous_position,   1) \
X(a, STATIC,   REQUIRED, DOUBLE,   position,          2) \
X(a, STATIC,   REQUIRED, UENUM,    event,             3) \
X(a, STATIC,   REQUIRED, UENUM,    error_code,        4)
#define EncoderState_CALLBACK NULL
#define EncoderState_DEFAULT NULL

#define EncoderConfig_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, DOUBLE,   offset,            1) \
X(a, STATIC,   REQUIRED, BOOL,     send_periodically,   2) \
X(a, STATIC,   REQUIRED, UINT32,   send_period,       3) \
X(a, STATIC,   REQUIRED, BOOL,     send_on_high_limit,   4) \
X(a, STATIC,   REQUIRED, DOUBLE,   high_limit,        5) \
X(a, STATIC,   REQUIRED, BOOL,     send_on_low_limit,   6) \
X(a, STATIC,   REQUIRED, DOUBLE,   low_limit,         7) \
X(a, STATIC,   REQUIRED, BOOL,     send_on_zero_cross,   8)
#define EncoderConfig_CALLBACK NULL
#define EncoderConfig_DEFAULT NULL

extern const pb_msgdesc_t EncoderState_msg;
extern const pb_msgdesc_t EncoderConfig_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define EncoderState_fields &EncoderState_msg
#define EncoderConfig_fields &EncoderConfig_msg

/* Maximum encoded size of messages (where known) */
#define EncoderConfig_size                       41
#define EncoderState_size                        22
#define PROTOS_ENCODER_PB_H_MAX_SIZE             EncoderConfig_size

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
